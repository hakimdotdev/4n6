@page
@model NewScanModel
@{
    ViewData["Title"] = "Create New Scan";
}
@using AutoRecon.Domain.Entities.Recon;
@using AutoRecon.WebUI.Pages

<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Scan Request</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label for="Targets">Targets</label>
                <input type="text" class="form-control" id="Targets" name="Targets" value="@Model.ScanRequest">
            </div>
            <div class="form-group">
                <label for="Description">Description</label>
                <textarea class="form-control" id="Description" name="Description" rows="3"></textarea>
            </div>
            <div class="form-group">
                <label for="Modules">Modules</label>
                <select class="form-select" id="Modules" name="Modules" multiple>
                    @{
                        var modulesByTag = new Dictionary<string, List<Type>>();

                        foreach (var moduleType in typeof(AutoRecon.Application.Modules.DNSZoneTransfer).Assembly.GetTypes())
                        {
                            if (moduleType.Namespace == "AutoRecon.Application.Modules" &&
                            (typeof(Scan).IsAssignableFrom(moduleType) ||
                            typeof(AutoRecon.Domain.Entities.IModule).IsAssignableFrom(moduleType)))
                            {
                                var tagsProperty = moduleType.GetProperty("Tags");
                                if (tagsProperty != null)
                                {
                                    var tagsValue = tagsProperty.GetValue(Activator.CreateInstance(moduleType)) as List<string>;
                                    if (tagsValue != null)
                                    {
                                        foreach (var tag in tagsValue)
                                        {
                                            if (!modulesByTag.ContainsKey(tag))
                                            {
                                                modulesByTag[tag] = new List<Type>();
                                            }
                                            modulesByTag[tag].Add(moduleType);
                                        }
                                    }
                                }
                            }
                        }
                        foreach (var (tag, moduleTypes) in modulesByTag)
                        {
                            @* <optgroup label="@tag"> *@
                            @foreach (var moduleType in moduleTypes)
                            {
                                                <option value="@moduleType.Name">@moduleType.Name</option>
                            }
                            @* </optgroup> *@
                        }
                    }
                </select>
                <div>
                    <input type="checkbox" name="Alle Module ausführen"value="@Model.AllModules"></input>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            The misuse of the software can result in criminal charges brought against the person in question
            The developer will not be held responsible in the event any criminal charges be brought against anyone
            misusing the software to break the law.
        </div>
    </div>
</div>
