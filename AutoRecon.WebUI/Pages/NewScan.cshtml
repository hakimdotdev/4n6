@page
@model NewScanModel
@{
    ViewData["Title"] = "Create New Scan";
}
@using AutoRecon.Domain.Entities.Recon;
@using AutoRecon.WebUI.Pages

<div class="modal-dialog modal-dialog-centered modal-xl" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Scan Request</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label for="Targets">Targets</label>
                <input type="text" class="form-control" id="Targets" name="Targets" value="@Model.ScanRequest" readonly>
            </div>
            <div class="form-group">
                <label for="Description">Description</label>
                <textarea class="form-control" id="Description" name="Description" rows="3"></textarea>
            </div>
            <div class="form-group">
                <label for="Modules">Modules</label>
                <select class="form-select" id="Modules" name="Modules" multiple>
                    @{
                        // Dictionary to store module types grouped by tags
                        var modulesByTag = new Dictionary<string, List<Type>>();

                        // Collect module types and group them by tags
                        foreach (var moduleType in typeof(AutoRecon.Application.Modules.DNSZoneTransfer).Assembly.GetTypes())
                        {
                            if (moduleType.Namespace == "AutoRecon.Application.Modules" &&
                            (typeof(Scan).IsAssignableFrom(moduleType) ||
                            typeof(AutoRecon.Domain.Entities.IModule).IsAssignableFrom(moduleType)))
                            {
                                // Get module tags using reflection
                                var tagsProperty = moduleType.GetProperty("Tags");
                                if (tagsProperty != null)
                                {
                                    var tagsValue = tagsProperty.GetValue(Activator.CreateInstance(moduleType)) as List<string>;
                                    if (tagsValue != null)
                                    {
                                        // Add module type to each tag's list of module types
                                        foreach (var tag in tagsValue)
                                        {
                                            if (!modulesByTag.ContainsKey(tag))
                                            {
                                                modulesByTag[tag] = new List<Type>();
                                            }
                                            modulesByTag[tag].Add(moduleType);
                                        }
                                    }
                                }
                            }
                        }

                        // Render options grouped by tags
                        foreach (var (tag, moduleTypes) in modulesByTag)
                        {
                            <optgroup label="@tag">
                                @foreach (var moduleType in moduleTypes)
                                {
                                    <option value="@moduleType.Name">@moduleType.Name</option>
                                }
                            </optgroup>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
    </div>
</div>
